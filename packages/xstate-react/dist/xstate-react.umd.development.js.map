{"version":3,"file":"xstate-react.umd.development.js","sources":["../../../node_modules/use-isomorphic-layout-effect/dist/use-isomorphic-layout-effect.browser.esm.js","../src/useConstant.ts","../src/utils.ts","../src/useMachine.ts","../src/useActor.ts","../src/useService.ts"],"sourcesContent":["import { useLayoutEffect } from 'react';\n\nvar index =  useLayoutEffect ;\n\nexport default index;\n","import * as React from 'react';\n\ninterface ResultBox<T> {\n  v: T;\n}\n\nexport default function useConstant<T>(fn: () => T): T {\n  const ref = React.useRef<ResultBox<T>>();\n\n  if (!ref.current) {\n    ref.current = { v: fn() };\n  }\n\n  return ref.current.v;\n}\n","export function partition<T, A extends T, B extends T>(\n  items: T[],\n  predicate: (item: T) => item is A\n): [A[], B[]] {\n  const [truthy, falsy] = [[], []] as [A[], B[]];\n\n  for (const item of items) {\n    if (predicate(item)) {\n      truthy.push(item);\n    } else {\n      falsy.push(item as B);\n    }\n  }\n\n  return [truthy, falsy];\n}\n","import { useState, useEffect, useRef } from 'react';\nimport useIsomorphicLayoutEffect from 'use-isomorphic-layout-effect';\nimport {\n  interpret,\n  EventObject,\n  StateMachine,\n  State,\n  Interpreter,\n  InterpreterOptions,\n  MachineOptions,\n  StateConfig,\n  Typestate,\n  ActionObject,\n  ActionFunction,\n  ActionMeta,\n  StateNode\n} from 'xstate';\nimport { MaybeLazy } from './types';\nimport useConstant from './useConstant';\nimport { partition } from './utils';\n\nenum ReactEffectType {\n  Effect = 1,\n  LayoutEffect = 2\n}\n\nexport interface ReactActionFunction<TContext, TEvent extends EventObject> {\n  (\n    context: TContext,\n    event: TEvent,\n    meta: ActionMeta<TContext, TEvent>\n  ): () => void;\n  __effect: ReactEffectType;\n}\n\nexport interface ReactActionObject<TContext, TEvent extends EventObject>\n  extends ActionObject<TContext, TEvent> {\n  exec: ReactActionFunction<TContext, TEvent>;\n}\n\nfunction createReactActionFunction<TContext, TEvent extends EventObject>(\n  exec: ActionFunction<TContext, TEvent>,\n  tag: ReactEffectType\n): ReactActionFunction<TContext, TEvent> {\n  const effectExec: unknown = (...args: Parameters<typeof exec>) => {\n    // don't execute; just return\n    return () => {\n      return exec(...args);\n    };\n  };\n\n  Object.defineProperties(effectExec, {\n    name: { value: `effect:${exec.name}` },\n    __effect: { value: tag }\n  });\n\n  return effectExec as ReactActionFunction<TContext, TEvent>;\n}\n\nexport function asEffect<TContext, TEvent extends EventObject>(\n  exec: ActionFunction<TContext, TEvent>\n): ReactActionFunction<TContext, TEvent> {\n  return createReactActionFunction(exec, ReactEffectType.Effect);\n}\n\nexport function asLayoutEffect<TContext, TEvent extends EventObject>(\n  exec: ActionFunction<TContext, TEvent>\n): ReactActionFunction<TContext, TEvent> {\n  return createReactActionFunction(exec, ReactEffectType.LayoutEffect);\n}\n\nexport type ActionStateTuple<TContext, TEvent extends EventObject> = [\n  ReactActionObject<TContext, TEvent>,\n  State<TContext, TEvent>\n];\n\nfunction executeEffect<TContext, TEvent extends EventObject>(\n  action: ReactActionObject<TContext, TEvent>,\n  state: State<TContext, TEvent>\n): void {\n  const { exec } = action;\n  const originalExec = exec!(state.context, state._event.data, {\n    action,\n    state,\n    _event: state._event\n  });\n\n  originalExec();\n}\n\ninterface UseMachineOptions<TContext, TEvent extends EventObject> {\n  /**\n   * If provided, will be merged with machine's `context`.\n   */\n  context?: Partial<TContext>;\n  /**\n   * The state to rehydrate the machine to. The machine will\n   * start at this state instead of its `initialState`.\n   */\n  state?: StateConfig<TContext, TEvent>;\n}\n\nexport function useMachine<\n  TContext,\n  TEvent extends EventObject,\n  TTypestate extends Typestate<TContext> = { value: any; context: TContext }\n>(\n  getMachine: MaybeLazy<StateMachine<TContext, any, TEvent, TTypestate>>,\n  options: Partial<InterpreterOptions> &\n    Partial<UseMachineOptions<TContext, TEvent>> &\n    Partial<MachineOptions<TContext, TEvent>> = {}\n): [\n  State<TContext, TEvent, any, TTypestate>,\n  Interpreter<TContext, any, TEvent, TTypestate>['send'],\n  Interpreter<TContext, any, TEvent, TTypestate>\n] {\n  const machine = useConstant(() => {\n    return typeof getMachine === 'function' ? getMachine() : getMachine;\n  });\n\n  if (\n    process.env.NODE_ENV !== 'production' &&\n    typeof getMachine !== 'function'\n  ) {\n    const [initialMachine] = useState(machine);\n\n    if (machine !== initialMachine) {\n      console.warn(\n        'Machine given to `useMachine` has changed between renders. This is not supported and might lead to unexpected results.\\n' +\n          'Please make sure that you pass the same Machine as argument each time.'\n      );\n    }\n  }\n\n  const {\n    context,\n    guards,\n    actions,\n    activities,\n    services,\n    delays,\n    state: rehydratedState,\n    ...interpreterOptions\n  } = options;\n\n  const [resolvedMachine, service] = useConstant<\n    [\n      StateNode<TContext, any, TEvent, TTypestate>,\n      Interpreter<TContext, any, TEvent, TTypestate>\n    ]\n  >(() => {\n    const machineConfig = {\n      context,\n      guards,\n      actions,\n      activities,\n      services,\n      delays\n    };\n    const machineWithConfig = machine.withConfig(machineConfig, {\n      ...machine.context,\n      ...context\n    } as TContext);\n\n    return [\n      machineWithConfig,\n      interpret(machineWithConfig, { deferEvents: true, ...interpreterOptions })\n    ];\n  });\n\n  const [state, setState] = useState<State<TContext, TEvent, any, TTypestate>>(\n    () => {\n      // Always read the initial state to properly initialize the machine\n      // https://github.com/davidkpiano/xstate/issues/1334\n      const { initialState } = resolvedMachine;\n      return rehydratedState ? State.create(rehydratedState) : initialState;\n    }\n  );\n\n  const effectActionsRef = useRef<\n    Array<[ReactActionObject<TContext, TEvent>, State<TContext, TEvent>]>\n  >([]);\n  const layoutEffectActionsRef = useRef<\n    Array<[ReactActionObject<TContext, TEvent>, State<TContext, TEvent>]>\n  >([]);\n\n  useIsomorphicLayoutEffect(() => {\n    service\n      .onTransition((currentState) => {\n        // Only change the current state if:\n        // - the incoming state is the \"live\" initial state (since it might have new actors)\n        // - OR the incoming state actually changed.\n        //\n        // The \"live\" initial state will have .changed === undefined.\n        const initialStateChanged =\n          currentState.changed === undefined &&\n          Object.keys(currentState.children).length;\n\n        if (currentState.changed || initialStateChanged) {\n          setState(currentState);\n        }\n\n        if (currentState.actions.length) {\n          const reactEffectActions = currentState.actions.filter(\n            (action): action is ReactActionObject<TContext, TEvent> => {\n              return (\n                typeof action.exec === 'function' &&\n                '__effect' in\n                  (action as ReactActionObject<TContext, TEvent>).exec\n              );\n            }\n          );\n\n          const [effectActions, layoutEffectActions] = partition(\n            reactEffectActions,\n            (action): action is ReactActionObject<TContext, TEvent> => {\n              return action.exec.__effect === ReactEffectType.Effect;\n            }\n          );\n\n          effectActionsRef.current.push(\n            ...effectActions.map<ActionStateTuple<TContext, TEvent>>(\n              (effectAction) => [effectAction, currentState]\n            )\n          );\n\n          layoutEffectActionsRef.current.push(\n            ...layoutEffectActions.map<ActionStateTuple<TContext, TEvent>>(\n              (layoutEffectAction) => [layoutEffectAction, currentState]\n            )\n          );\n        }\n      })\n      .start(rehydratedState ? State.create(rehydratedState) : undefined);\n\n    return () => {\n      service.stop();\n    };\n  }, []);\n\n  // Make sure actions and services are kept updated when they change.\n  // This mutation assignment is safe because the service instance is only used\n  // in one place -- this hook's caller.\n  useEffect(() => {\n    Object.assign(service.machine.options.actions, actions);\n  }, [actions]);\n\n  useEffect(() => {\n    Object.assign(service.machine.options.services, services);\n  }, [services]);\n\n  // this is somewhat weird - this should always be flushed within useLayoutEffect\n  // but we don't want to receive warnings about useLayoutEffect being used on the server\n  // so we have to use `useIsomorphicLayoutEffect` to silence those warnings\n  useIsomorphicLayoutEffect(() => {\n    while (layoutEffectActionsRef.current.length) {\n      const [\n        layoutEffectAction,\n        effectState\n      ] = layoutEffectActionsRef.current.shift()!;\n\n      executeEffect(layoutEffectAction, effectState);\n    }\n  }, [state]); // https://github.com/davidkpiano/xstate/pull/1202#discussion_r429677773\n\n  useEffect(() => {\n    while (effectActionsRef.current.length) {\n      const [effectAction, effectState] = effectActionsRef.current.shift()!;\n\n      executeEffect(effectAction, effectState);\n    }\n  }, [state]);\n\n  return [state, service.send, service];\n}\n","import { useState, useRef } from 'react';\nimport useIsomorphicLayoutEffect from 'use-isomorphic-layout-effect';\nimport { Sender, ActorRefLike } from './types';\nimport { EventObject, Actor } from 'xstate';\nimport useConstant from './useConstant';\n\nexport function useActor<TEvent extends EventObject, TEmitted = any>(\n  actorRef: ActorRefLike<TEvent, TEmitted> | Actor,\n  getSnapshot: (actor: typeof actorRef) => TEmitted = (a) =>\n    'state' in a ? a.state : (undefined as any)\n): [TEmitted, Sender<TEvent>] {\n  const actorRefRef = useRef(actorRef);\n  const deferredEventsRef = useRef<TEvent[]>([]);\n  const [current, setCurrent] = useState(() => getSnapshot(actorRef));\n\n  const send: Sender<TEvent> = useConstant(() => (event) => {\n    const currentActorRef = actorRefRef.current;\n    // If the previous actor is a deferred actor,\n    // queue the events so that they can be replayed\n    // on the non-deferred actor.\n    if ('deferred' in currentActorRef && currentActorRef.deferred) {\n      deferredEventsRef.current.push(event);\n    } else {\n      currentActorRef.send(event);\n    }\n  });\n\n  useIsomorphicLayoutEffect(() => {\n    actorRefRef.current = actorRef;\n    setCurrent(getSnapshot(actorRef));\n    const subscription = actorRef.subscribe(setCurrent);\n\n    // Dequeue deferred events from the previous deferred actorRef\n    while (deferredEventsRef.current.length > 0) {\n      const deferredEvent = deferredEventsRef.current.shift()!;\n\n      actorRef.send(deferredEvent);\n    }\n\n    return () => {\n      subscription.unsubscribe();\n    };\n  }, [actorRef]);\n\n  return [current, send];\n}\n","import { useMemo } from 'react';\nimport { EventObject, State, Interpreter, Typestate } from 'xstate';\nimport { useActor } from './useActor';\nimport { ActorRef, PayloadSender } from './types';\n\nexport function fromService<TContext, TEvent extends EventObject>(\n  service: Interpreter<TContext, any, TEvent>\n): ActorRef<TEvent, State<TContext, TEvent>> {\n  if (process.env.NODE_ENV !== 'production' && !('machine' in service)) {\n    throw new Error(\n      `Attempted to use an actor-like object instead of a service in the useService() hook. Please use the useActor() hook instead.`\n    );\n  }\n\n  const { machine } = service as Interpreter<TContext, any, TEvent>;\n  return {\n    send: service.send.bind(service),\n    subscribe: (cb) => service.subscribe((state) => cb(state)),\n    stop: service.stop!,\n    // TODO: remove compat lines in a new major, replace literal number with InterpreterStatus then as well\n    current:\n      ('status' in service ? service.status : (service as any)._status) !== 0\n        ? service.state\n        : machine.initialState,\n    name: service.sessionId\n  };\n}\n\nexport function useService<\n  TContext,\n  TEvent extends EventObject,\n  TTypestate extends Typestate<TContext> = { value: any; context: TContext }\n>(\n  service: Interpreter<TContext, any, TEvent, TTypestate>\n): [State<TContext, TEvent, any, TTypestate>, PayloadSender<TEvent>] {\n  const serviceActor = useMemo(() => fromService(service), [service]);\n\n  const [state] = useActor<TEvent, State<TContext, TEvent, any, TTypestate>>(\n    serviceActor,\n    (actor) => (actor as typeof serviceActor).current\n  );\n\n  return [state, service.send];\n}\n"],"names":["index","useLayoutEffect","useConstant","fn","ref","React","current","v","partition","items","predicate","truthy","falsy","item","push","ReactEffectType","createReactActionFunction","exec","tag","effectExec","args","Object","defineProperties","name","value","__effect","asEffect","Effect","asLayoutEffect","LayoutEffect","executeEffect","action","state","originalExec","context","_event","data","useMachine","getMachine","options","machine","process","useState","initialMachine","console","warn","guards","actions","activities","services","delays","rehydratedState","interpreterOptions","machineConfig","machineWithConfig","withConfig","interpret","deferEvents","resolvedMachine","service","initialState","State","create","setState","effectActionsRef","useRef","layoutEffectActionsRef","useIsomorphicLayoutEffect","onTransition","currentState","initialStateChanged","changed","undefined","keys","children","length","reactEffectActions","filter","effectActions","layoutEffectActions","map","effectAction","layoutEffectAction","start","stop","useEffect","assign","shift","effectState","send","useActor","actorRef","getSnapshot","a","actorRefRef","deferredEventsRef","setCurrent","event","currentActorRef","deferred","subscription","subscribe","deferredEvent","unsubscribe","fromService","Error","bind","cb","status","_status","sessionId","useService","serviceActor","useMemo","actor"],"mappings":"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"}